// Nomes brasileiros para notifica√ß√µes de doa√ß√£o
const nomesBrasileiros = [
  "Ana Silva",
  "Jo√£o Santos",
  "Maria Oliveira",
  "Pedro Costa",
  "Juliana Lima",
  "Carlos Pereira",
  "Fernanda Souza",
  "Marcelo Alves",
  "Camila Rodrigues",
  "Rafael Gomes",
  "Aline Ferreira",
  "Bruno Carvalho",
  "Daniela Martins",
  "Eduardo Ribeiro",
  "Fl√°via Moreira",
  "Gabriel Pinto",
  "Isabela Nunes",
  "Leandro Dias",
  "Luciana Barbosa",
  "Mateus Mendes",
  "Nat√°lia Cardoso",
  "Ot√°vio Correia",
  "Patr√≠cia Freitas",
  "Roberto Vieira",
  "Sandra Teixeira",
];

// Valores de doa√ß√£o para notifica√ß√µes
const valoresDoacao = [
  30, 40, 50, 70, 80, 100, 150, 200, 250, 300, 350, 400, 450, 500, 600, 700,
  900, 1000,
];

// Vari√°veis de controle da arrecada√ß√£o
let valorArrecadado = localStorage.getItem("valorArrecadado")
  ? parseFloat(localStorage.getItem("valorArrecadado"))
  : 23450.41;
const valorMeta = 287000.0;

// Fun√ß√£o para criar e mostrar uma notifica√ß√£o toast
function mostrarNotificacaoDoacao() {
  // Selecionar um nome e valor aleat√≥rios
  const nome =
    nomesBrasileiros[Math.floor(Math.random() * nomesBrasileiros.length)];
  const valor = valoresDoacao[Math.floor(Math.random() * valoresDoacao.length)];

  // Criar elemento toast
  const toast = document.createElement("div");
  toast.className = "toast-notification";

  // Adicionar √≠cone (emoji de cora√ß√£o)
  const icone = document.createElement("span");
  icone.className = "toast-icon";
  icone.textContent = "‚ù§Ô∏è";
  toast.appendChild(icone);

  // Adicionar conte√∫do
  const conteudo = document.createElement("div");
  conteudo.className = "toast-content";
  conteudo.innerHTML = `<strong>${nome}</strong> acabou de doar <strong>R$ ${valor.toFixed(
    2
  )}</strong>`;
  toast.appendChild(conteudo);

  // Adicionar ao corpo do documento
  document.body.appendChild(toast);

  // Adicionar classe para animar entrada
  setTimeout(() => {
    toast.classList.add("show");
  }, 10);

  // Remover ap√≥s alguns segundos
  setTimeout(() => {
    toast.classList.remove("show");
    toast.classList.add("hide");

    // Remover do DOM ap√≥s a anima√ß√£o
    setTimeout(() => {
      document.body.removeChild(toast);
    }, 500);
  }, 4000);

  // Atualizar o progresso
  atualizarProgresso(valor);

  // Agendar a pr√≥xima notifica√ß√£o
  agendarProximaNotificacao();
}

// Fun√ß√£o para atualizar a barra de progresso e o valor arrecadado
function atualizarProgresso(valorDoacao) {
  // Atualizar valor arrecadado
  valorArrecadado += valorDoacao;

  // Salvar no localStorage
  localStorage.setItem("valorArrecadado", valorArrecadado.toString());

  // Calcular a porcentagem
  const porcentagem = Math.min(100, (valorArrecadado / valorMeta) * 100);

  // Atualizar os elementos na p√°gina
  const valorArrecadadoElement = document.querySelector(
    ".progress-values p:first-child"
  );
  const barraProgressoElement = document.querySelector(".progress-bar");
  const porcentagemElement = document.querySelector(".progress-bar strong");

  if (valorArrecadadoElement) {
    valorArrecadadoElement.textContent = `R$ ${valorArrecadado.toFixed(2)}`;
  }

  if (barraProgressoElement) {
    barraProgressoElement.style.width = `${porcentagem}%`;

    // Adicionar classe de anima√ß√£o
    barraProgressoElement.classList.add("updated");

    // Remover a classe ap√≥s a anima√ß√£o terminar
    setTimeout(() => {
      barraProgressoElement.classList.remove("updated");
    }, 500);
  }

  if (porcentagemElement) {
    porcentagemElement.textContent = `${Math.round(porcentagem)}%`;
  }
}

// Fun√ß√£o para inicializar o valor arrecadado na p√°gina
function inicializarValorArrecadado() {
  const valorArrecadadoElement = document.querySelector(
    ".progress-values p:first-child"
  );
  const barraProgressoElement = document.querySelector(".progress-bar");
  const porcentagemElement = document.querySelector(".progress-bar strong");

  if (valorArrecadadoElement) {
    valorArrecadadoElement.textContent = `R$ ${valorArrecadado.toFixed(2)}`;
  }

  const porcentagem = Math.min(100, (valorArrecadado / valorMeta) * 100);

  if (barraProgressoElement) {
    barraProgressoElement.style.width = `${porcentagem}%`;
  }

  if (porcentagemElement) {
    porcentagemElement.textContent = `${Math.round(porcentagem)}%`;
  }
}

// Fun√ß√£o para agendar a pr√≥xima notifica√ß√£o
function agendarProximaNotificacao() {
  // Tempo aleat√≥rio entre 5 e 20 segundos
  const tempoEspera = Math.floor(Math.random() * (20000 - 5000) + 5000);
  setTimeout(mostrarNotificacaoDoacao, tempoEspera);
}

// Fun√ß√£o para configurar os bot√µes de doa√ß√£o
function configurarBotoesDoacao() {
  const botoes = document.querySelectorAll(".post-button2");

  botoes.forEach((botao) => {
    botao.addEventListener("click", function (e) {
      e.preventDefault();

      // Obter o valor do bot√£o (texto do bot√£o sem o "R$ ")
      const valorTexto = this.textContent.trim().replace("R$ ", "");
      const valor = parseFloat(valorTexto.replace(",", "."));

      // Mostrar notifica√ß√£o personalizada para o doador atual
      mostrarNotificacaoDoadorAtual(valor);

      // Redirecionar para a p√°gina de pagamento (substitua pela URL real)
      // window.location.href = `URL_DE_PAGAMENTO?valor=${valor}`;

      // Atualizar o progresso
      atualizarProgresso(valor);
    });
  });
}

// Fun√ß√£o para mostrar notifica√ß√£o para o doador atual
function mostrarNotificacaoDoadorAtual(valor) {
  // Criar notifica√ß√£o para o doador atual
  const toast = document.createElement("div");
  toast.className = "toast-notification";

  // Adicionar √≠cone (emoji de cora√ß√£o)
  const icone = document.createElement("span");
  icone.className = "toast-icon";
  icone.textContent = "üéâ";
  toast.appendChild(icone);

  // Adicionar conte√∫do
  const conteudo = document.createElement("div");
  conteudo.className = "toast-content";
  conteudo.innerHTML = `<strong>Obrigado pela sua doa√ß√£o de R$ ${valor.toFixed(
    2
  )}!</strong> Sua ajuda √© preciosa para o Davizinho.`;
  toast.appendChild(conteudo);

  // Adicionar ao corpo do documento
  document.body.appendChild(toast);

  // Adicionar classe para animar entrada
  setTimeout(() => {
    toast.classList.add("show");
  }, 10);

  // Remover ap√≥s alguns segundos
  setTimeout(() => {
    toast.classList.remove("show");
    toast.classList.add("hide");

    // Remover do DOM ap√≥s a anima√ß√£o
    setTimeout(() => {
      document.body.removeChild(toast);
    }, 500);
  }, 5000);
}

// Iniciar o processo quando a p√°gina carregar
document.addEventListener("DOMContentLoaded", () => {
  // Inicializar o valor arrecadado
  inicializarValorArrecadado();

  // Configurar os bot√µes de doa√ß√£o
  configurarBotoesDoacao();

  // Primeira notifica√ß√£o aparece entre 3 e 8 segundos ap√≥s carregar
  setTimeout(() => {
    mostrarNotificacaoDoacao();
  }, Math.floor(Math.random() * (8000 - 3000) + 3000));
});
